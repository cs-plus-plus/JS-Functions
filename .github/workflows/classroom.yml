name: autograde

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  autograde:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install Jest + jsdom
      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      # Jest setup (TextEncoder/Decoder for Node 20)
      - name: Write jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      # Jest config
      - name: Write jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      # Write test file
      - name: Write tests
        run: |
          mkdir -p __tests__
          cat > __tests__/forms-8_7.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          const wait = (ms=30) => new Promise(r => setTimeout(r, ms));
          const find = arr => arr.find(p => fs.existsSync(p)) || null;
          const findIndex = () => find(['index.html','public/index.html','src/index.html','docs/index.html']);

          function byId(doc, id) { return doc.getElementById(id); }
          function text(doc, id) {
            const el = byId(doc, id);
            return (el?.textContent || el?.innerText || '').trim();
          }
          function setVal(doc, id, v) {
            const el = byId(doc, id); if (!el) return false; el.value = String(v); return true;
          }
          function click(doc, id) { byId(doc, id).click(); }

          async function loadDOM() {
            const idx = findIndex();
            if (!idx) throw new Error('index.html not found (root/public/src/docs).');

            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // quiet CI

            const baseDir = path.dirname(path.resolve(idx));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';

            const dom = await JSDOM.fromFile(idx, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            dom.window.prompt = () => { throw new Error('Use inputs, not prompt().'); };
            dom.window.alert  = () => { throw new Error('Use textContent, not alert().'); };

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          describe('Unit 8.7 – Forms & EventListeners', () => {
            let dom, window, document;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
            });

            test('required elements exist', () => {
              ['btnCalc','clearBtn','myPara','myInput','serviceSelect'].forEach(id =>
                expect(document.getElementById(id)).not.toBeNull()
              );
              ['r1','r2','r3','r4'].forEach(id =>
                expect(document.getElementById(id)).not.toBeNull()
              );
              for (let i=1;i<=8;i++) {
                expect(document.getElementById('cb'+i)).not.toBeNull();
              }
              const radios = document.getElementsByName('rg');
              expect(radios.length).toBeGreaterThanOrEqual(4);

              const sel = document.getElementById('serviceSelect');
              const vals = Array.from(sel.options).map(o => o.value).sort();
              expect(vals).toEqual(['delivery','dinein','takeout'].sort());
            });

            test('button uses addEventListener and no inline onclick', () => {
              const calc = document.getElementById('btnCalc');
              const clear = document.getElementById('clearBtn');
              expect(calc.getAttribute('onclick')).toBeNull();
              expect(clear.getAttribute('onclick')).toBeNull();
            });

            test('price large two toppings dine in', async () => {
              document.getElementById('cb1').checked = true;
              document.getElementById('cb2').checked = true;
              setVal(document, 'serviceSelect', 'dinein');
              setVal(document, 'myInput', 'Alex');
              for (let i=3;i<=8;i++) document.getElementById('cb'+i).checked = false;

              click(document, 'btnCalc'); await wait();
              const t = text(document, 'myPara');
              const num = parseFloat((t.match(/-?\d+(\.\d+)?/)||[])[0]);
              expect(Math.abs(num - 13.5) < 1e-6).toBe(true);
            });

            test('price small no toppings delivery', async () => {
              document.getElementById('r1').checked = true;
              for (let i=1;i<=8;i++) document.getElementById('cb'+i).checked = false;
              setVal(document, 'serviceSelect', 'delivery');
              setVal(document, 'myInput', 'Sam');

              click(document, 'btnCalc'); await wait();
              const t = text(document, 'myPara');
              const num = parseFloat((t.match(/-?\d+(\.\d+)?/)||[])[0]);
              expect(Math.abs(num - 10.5) < 1e-6).toBe(true);
            });

            test('price xl eight toppings dine in', async () => {
              document.getElementById('r4').checked = true;
              for (let i=1;i<=8;i++) document.getElementById('cb'+i).checked = true;
              setVal(document, 'serviceSelect', 'dinein');
              setVal(document, 'myInput', 'Riley');

              click(document, 'btnCalc'); await wait();
              const t = text(document, 'myPara');
              const num = parseFloat((t.match(/-?\d+(\.\d+)?/)||[])[0]);
              expect(Math.abs(num - 19.0) < 1e-6).toBe(true);
            });

            test('clear button resets form', async () => {
              setVal(document, 'myInput', 'Taylor');
              document.getElementById('r4').checked = true;
              for (let i=1;i<=8;i++) document.getElementById('cb'+i).checked = i%2===0;
              setVal(document, 'serviceSelect', 'delivery');
              byId(document, 'myPara').textContent = 'temp';

              click(document, 'clearBtn'); await wait();

              expect(byId(document,'myInput').value).toBe('');
              expect(byId(document,'myPara').textContent).toBe('');
              expect(byId(document,'r3').checked).toBe(true);
              expect(byId(document,'serviceSelect').value).toBe('dinein');
              for (let i=1;i<=8;i++) expect(byId(document,'cb'+i).checked).toBe(false);
            });
          });
          EOF

      # === Individual graded runs (fixed testNamePattern regexes) ===
      - id: t_required
        name: required elements exist
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: required elements exist
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*required elements exist$"
          timeout: 60
          max-score: 15

      - id: t_listener
        name: no inline onclick; uses addEventListener
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: no inline onclick; uses addEventListener
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*button uses addEventListener and no inline onclick$"
          timeout: 60
          max-score: 15

      - id: t_large
        name: large + 2 toppings dine-in = 13.50
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: large + 2 toppings dine-in = 13.50
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*price large two toppings dine in$"
          timeout: 60
          max-score: 20

      - id: t_small
        name: small + delivery = 10.50
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: small + delivery = 10.50
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*price small no toppings delivery$"
          timeout: 60
          max-score: 20

      - id: t_xl
        name: xl + all toppings = 19.00
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: xl + all toppings = 19.00
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*price xl eight toppings dine in$"
          timeout: 60
          max-score: 15

      - id: t_clear
        name: clear resets form
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: clear resets form
          setup-command: echo "ready"
          command: npx jest --runInBand --testNamePattern ".*clear button resets form$"
          timeout: 60
          max-score: 15

      # === Summary ===
      - name: Build & publish combined summary
        shell: bash
        run: |
          npx jest --runInBand --json --outputFile=jest-summary.json || true
          node - <<'NODE'
          const fs = require('fs');
          let jr = {};
          try { jr = JSON.parse(fs.readFileSync('jest-summary.json','utf8')); } catch {}
          const assertions = (jr.testResults||[]).flatMap(t => t.assertionResults || []);
          const wanted = [
            'required elements exist',
            'button uses addEventListener and no inline onclick',
            'price large two toppings dine in',
            'price small no toppings delivery',
            'price xl eight toppings dine in',
            'clear button resets form'
          ];
          const status = {};
          for (const name of wanted) {
            const a = assertions.find(x => x.title === name);
            status[name] = !!a && a.status === 'passed';
          }
          const passed = Object.values(status).filter(Boolean).length;
          const checks = assertions.map(t => `${t.status === 'passed' ? '✅' : '❌'} ${t.title}`);
          const md = [
            `# Unit 8.7 Autograder Summary`,
            ``,
            `**Passed: ${passed}/${wanted.length}**`,
            ``,
            ...wanted.map(n => `${status[n] ? '✅' : '❌'} ${n}`),
            ``,
            `## Checks`,
            ...checks,
            ``
          ].join('\n');
          console.log(md);
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, md + '\n');
          NODE

      # === Reporter (env vars + runners) ===
      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          T_REQUIRED_RESULTS:  ${{ steps.t_required.outputs.result }}
          T_LISTENER_RESULTS:  ${{ steps.t_listener.outputs.result }}
          T_LARGE_RESULTS:     ${{ steps.t_large.outputs.result }}
          T_SMALL_RESULTS:     ${{ steps.t_small.outputs.result }}
          T_XL_RESULTS:        ${{ steps.t_xl.outputs.result }}
          T_CLEAR_RESULTS:     ${{ steps.t_clear.outputs.result }}
        with:
          runners: t_required,t_listener,t_large,t_small,t_xl,t_clear
          token: ${{ github.token }}
