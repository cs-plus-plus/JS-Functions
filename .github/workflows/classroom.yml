name: Classroom Autograder – Unit 8.6 - Functions (Buttons + textContent)

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  autograde:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      - name: Create tests for 5-button, DOM-output behavior
        run: |
          mkdir -p __tests__
          cat > __tests__/functions-8_6.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          const wait = (ms=50) => new Promise(r => setTimeout(r, ms));
          const find = arr => arr.find(p => fs.existsSync(p)) || null;
          const findIndex = () => find(['index.html','public/index.html','src/index.html','docs/index.html']);

          function text(doc, id) {
            const el = doc.getElementById(id);
            return (el?.textContent || el?.innerText || '').trim();
          }

          function setVal(doc, id, v) {
            const el = doc.getElementById(id);
            if (!el) return false;
            el.value = String(v);
            return true;
          }

          async function loadDOM() {
            const idx = findIndex();
            if (!idx) throw new Error('index.html not found (root/public/src/docs).');

            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // quiet CI

            const baseDir = path.dirname(path.resolve(idx));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';

            const dom = await JSDOM.fromFile(idx, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            // Disallow prompt/alert; output must be on the page
            dom.window.prompt = () => { throw new Error('Use inputs, not prompt().'); };
            dom.window.alert  = () => { throw new Error('Use textContent, not alert().'); };

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          describe('Unit 8.6 – Functions (Buttons + textContent)', () => {
            let dom, window, document;
            let originalLog;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
              originalLog = console.log;
            });

            beforeEach(() => {
              // stub console.log to ensure no logging during clicks
              console.log = jest.fn();
            });

            afterEach(() => {
              console.log = originalLog;
            });

            test('required elements exist (5 buttons, inputs, outputs)', () => {
              const btnIds = ['btnMyFunc','btnRandom','btnAdder','btnDistance','btnQuadratic'];
              const outIds = ['outMyFunc','outRandom','outAdder','outDistance','outQuadratic'];
              const inIds  = ['maxRand','addX','addY','x1','y1','x2','y2','qa','qb','qc'];

              btnIds.forEach(id => expect(document.getElementById(id)).not.toBeNull());
              outIds.forEach(id => expect(document.getElementById(id)).not.toBeNull());
              inIds.forEach(id  => expect(document.getElementById(id)).not.toBeNull());
            });

            test('myFunc: counter increments and writes via textContent (no console.log)', async () => {
              const btn = document.getElementById('btnMyFunc');
              const out = () => text(document,'outMyFunc');

              btn.click(); await wait();
              const first = out();
              btn.click(); await wait();
              const second = out();

              const n1 = parseInt(first.match(/-?\d+/)?.[0] || '0', 10);
              const n2 = parseInt(second.match(/-?\d+/)?.[0] || '0', 10);
              expect(n2).toBeGreaterThan(n1);

              // no logging for output
              expect(console.log).not.toHaveBeenCalled();
            });

            test('getRandomNum(max): result 1..max or 0 when invalid (written to #outRandom)', async () => {
              setVal(document,'maxRand','12');
              document.getElementById('btnRandom').click(); await wait();
              const r1 = parseInt(text(document,'outRandom').match(/-?\d+/)?.[0] || '0', 10);
              expect(r1).toBeGreaterThanOrEqual(1);
              expect(r1).toBeLessThanOrEqual(12);

              setVal(document,'maxRand','0');
              document.getElementById('btnRandom').click(); await wait();
              const r0 = parseInt(text(document,'outRandom').match(/-?\d+/)?.[0] || '9999', 10);
              expect(r0).toBe(0);

              expect(console.log).not.toHaveBeenCalled();
            });

            test('myAdder(x,y): sum shown in #outAdder (no console.log)', async () => {
              setVal(document,'addX','2');
              setVal(document,'addY','3');
              document.getElementById('btnAdder').click(); await wait();
              const sum = parseFloat(text(document,'outAdder').match(/-?\d+(\.\d+)?/)?.[0] || 'NaN');
              expect(sum).toBeCloseTo(5, 6);
              expect(console.log).not.toHaveBeenCalled();
            });

            test('distance(x1,y1,x2,y2): numeric distance shown in #outDistance (≈4.2426; no console.log)', async () => {
              setVal(document,'x1','4'); setVal(document,'y1','5');
              setVal(document,'x2','7'); setVal(document,'y2','2');
              document.getElementById('btnDistance').click(); await wait();
              const d = parseFloat(text(document,'outDistance').match(/-?\d+(\.\d+)?/)?.[0] || 'NaN');
              expect(d).toBeCloseTo(Math.sqrt(18), 2); // tolerance
              expect(console.log).not.toHaveBeenCalled();
            });

            test('quadratic(a,b,c): roots shown in #outQuadratic (handle double root)', async () => {
              // (1,2,1) → root -1
              setVal(document,'qa','1'); setVal(document,'qb','2'); setVal(document,'qc','1');
              document.getElementById('btnQuadratic').click(); await wait();
              const t = text(document,'outQuadratic');
              const nums = (t.match(/-?\d+(\.\d+)?/g) || []).map(Number);
              expect(nums.some(n => Math.abs(n - (-1)) < 1e-3)).toBe(true);
              expect(console.log).not.toHaveBeenCalled();
            });
          });
          EOF

      # ---------- GRADING STEPS (each awards points, total 100) ----------

      - name: 'required elements exist'
        id: t_required
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'required elements exist'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "required elements exist (5 buttons, inputs, outputs)"'
          timeout: 60
          max-score: 10

      - name: 'myFunc increments & writes'
        id: t_myfunc
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'myFunc increments & writes'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "myFunc: counter increments and writes via textContent (no console.log)"'
          timeout: 60
          max-score: 20

      - name: 'getRandomNum in range'
        id: t_random
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'getRandomNum in range'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "getRandomNum(max): result 1..max or 0 when invalid (written to #outRandom)"'
          timeout: 60
          max-score: 20

      - name: 'myAdder shows sum'
        id: t_adder
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'myAdder shows sum'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "myAdder(x,y): sum shown in #outAdder (no console.log)"'
          timeout: 60
          max-score: 20

      - name: 'distance shows numeric value'
        id: t_distance
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'distance shows numeric value'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "distance(x1,y1,x2,y2): numeric distance shown in #outDistance (≈4.2426; no console.log)"'
          timeout: 60
          max-score: 15

      - name: 'quadratic shows roots'
        id: t_quadratic
        uses: classroom-resources/autograding-command-grader@v1
        with:
          test-name: 'quadratic shows roots'
          setup-command: echo "ready"
          command: 'npx jest --runInBand -t "quadratic(a,b,c): roots shown in #outQuadratic (handle double root)"'
          timeout: 60
          max-score: 15


      # Ground truth: run full suite once to collect titles for the pretty list
      - name: Create jest-summary.json
        run: |
          npx jest --runInBand --json --outputFile=jest-summary.json || true

      - name: Summarize results with hints (from grader outputs)
        run: |
          node - <<'NODE'
          const fs = require('fs');

          // Helper: decode autograder result from env (JSON or base64 JSON)
          function parseResult(envName) {
            const raw = process.env[envName] || '';
            const tryParse = s => { try { return JSON.parse(s); } catch { return null; } };
            return tryParse(raw) || tryParse(Buffer.from(raw, 'base64').toString('utf8')) || {};
          }

          const items = [
            ['T_REQUIRED_RESULTS', 'required elements exist',
             'Ensure all required IDs exist: btnMyFunc/Random/Adder/Distance/Quadratic, outMyFunc/Random/Adder/Distance/Quadratic, and inputs maxRand, addX, addY, x1, y1, x2, y2, qa, qb, qc.'],

            ['T_MYFUNC_RESULTS', 'myFunc increments & writes',
             'Keep a counter in JS and write to #outMyFunc with textContent (do not use console.log).'],

            ['T_RANDOM_RESULTS', 'getRandomNum in range',
             'If max < 1, write 0; otherwise generate integers in [1..max] and write to #outRandom via textContent.'],

            ['T_ADDER_RESULTS', 'myAdder shows sum',
             'Parse numbers from #addX and #addY, add them, and write the sum to #outAdder using textContent.'],

            ['T_DISTANCE_RESULTS', 'distance shows numeric value',
             'Compute sqrt((x2-x1)^2 + (y2-y1)^2) and write a number to #outDistance.'],

            ['T_QUADRATIC_RESULTS', 'quadratic shows roots',
             'Handle double root when b^2-4ac == 0; write roots to #outQuadratic.'],
          ];

          const statuses = items.map(([env, label, hint]) => {
            const r = parseResult(env);
            const passed = (r.status || r.passed || '').toString().toLowerCase() === 'pass';
            return { label, hint, passed };
          });

          const passedCount = statuses.filter(s => s.passed).length;
          const total = statuses.length;

          const lines = [];
          lines.push('# Unit 8.6 Autograder Summary', '');
          lines.push(`**Passed:** ${passedCount}/${total}`, '');

          for (const s of statuses) {
            lines.push(`${s.passed ? '✅' : '❌'} ${s.label}` + (s.passed ? '' : ` - Hint: ${s.hint}`));
          }
          lines.push('');

          // Append raw Jest check titles for transparency
          try {
            const jr = JSON.parse(fs.readFileSync('jest-summary.json','utf8'));
            const assertions = (jr.testResults||[]).flatMap(t => t.assertionResults || []);
            if (assertions.length) {
              lines.push('## Checks');
              for (const a of assertions) {
                lines.push(`${a.status === 'passed' ? '✅' : '❌'} ${a.title}`);
              }
            }
          } catch {}

          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, lines.join('\n'));
          NODE
        env:
          T_REQUIRED_RESULTS:  ${{ steps.t_required.outputs.result }}
          T_MYFUNC_RESULTS:    ${{ steps.t_myfunc.outputs.result }}
          T_RANDOM_RESULTS:    ${{ steps.t_random.outputs.result }}
          T_ADDER_RESULTS:     ${{ steps.t_adder.outputs.result }}
          T_DISTANCE_RESULTS:  ${{ steps.t_distance.outputs.result }}
          T_QUADRATIC_RESULTS: ${{ steps.t_quadratic.outputs.result }}

      # ---------- Report scores back to GitHub Classroom ----------
      - name: Autograding Reporter
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          T_REQUIRED_RESULTS:  ${{ steps.t_required.outputs.result }}
          T_MYFUNC_RESULTS:    ${{ steps.t_myfunc.outputs.result }}
          T_RANDOM_RESULTS:    ${{ steps.t_random.outputs.result }}
          T_ADDER_RESULTS:     ${{ steps.t_adder.outputs.result }}
          T_DISTANCE_RESULTS:  ${{ steps.t_distance.outputs.result }}
          T_QUADRATIC_RESULTS: ${{ steps.t_quadratic.outputs.result }}
        with:
          runners: t_required,t_myfunc,t_random,t_adder,t_distance,t_quadratic
