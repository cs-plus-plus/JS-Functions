name: "Classroom Autograder – Unit 8.6: Functions (Buttons + textContent)"

on:
  push:
  pull_request:

jobs:
  autograde:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install test deps
        run: |
          npm init -y >/dev/null 2>&1 || true
          npm install --save-dev jest@29 jsdom@21 jest-environment-jsdom@29

      - name: Jest setup
        run: |
          cat > jest.setup.cjs <<'EOF'
          const { TextEncoder, TextDecoder } = require('util');
          if (typeof global.TextEncoder === 'undefined') global.TextEncoder = TextEncoder;
          if (typeof global.TextDecoder === 'undefined') global.TextDecoder = TextDecoder;
          EOF

      - name: Jest config
        run: |
          cat > jest.config.cjs <<'EOF'
          module.exports = {
            testEnvironment: 'jsdom',
            setupFiles: ['<rootDir>/jest.setup.cjs'],
            testMatch: ['**/__tests__/**/*.test.cjs']
          };
          EOF

      - name: Create tests for 5-button, DOM-output behavior
        run: |
          mkdir -p __tests__
          cat > __tests__/functions-8_6.test.cjs <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const { JSDOM, VirtualConsole } = require('jsdom');

          const wait = (ms=50) => new Promise(r => setTimeout(r, ms));
          const find = arr => arr.find(p => fs.existsSync(p)) || null;
          const findIndex = () => find(['index.html','public/index.html','src/index.html','docs/index.html']);

          function text(doc, id) {
            const el = doc.getElementById(id);
            return (el?.textContent || el?.innerText || '').trim();
          }

          function setVal(doc, id, v) {
            const el = doc.getElementById(id);
            if (!el) return false;
            el.value = String(v);
            return true;
          }

          async function loadDOM() {
            const idx = findIndex();
            if (!idx) throw new Error('index.html not found (root/public/src/docs).');

            const vconsole = new VirtualConsole();
            vconsole.on('error', () => {}); // quiet CI

            const baseDir = path.dirname(path.resolve(idx));
            const baseUrl = 'file://' + baseDir.replace(/\\+/g, '/') + '/';

            const dom = await JSDOM.fromFile(idx, {
              url: baseUrl,
              runScripts: 'dangerously',
              resources: 'usable',
              pretendToBeVisual: true,
              virtualConsole: vconsole
            });

            // Disallow prompt/alert; output must be on the page
            dom.window.prompt = () => { throw new Error('Use inputs, not prompt().'); };
            dom.window.alert  = () => { throw new Error('Use textContent, not alert().'); };

            await new Promise(res => dom.window.addEventListener('load', res, { once: true }));
            await wait();
            return dom;
          }

          describe('Unit 8.6 – Functions (Buttons + textContent)', () => {
            let dom, window, document;
            let originalLog;

            beforeAll(async () => {
              dom = await loadDOM();
              window = dom.window;
              document = window.document;
              originalLog = console.log;
            });

            beforeEach(() => {
              // stub console.log to ensure no logging during clicks
              console.log = jest.fn();
            });

            afterEach(() => {
              console.log = originalLog;
            });

            test('required elements exist (5 buttons, inputs, outputs)', () => {
              const btnIds = ['btnMyFunc','btnRandom','btnAdder','btnDistance','btnQuadratic'];
              const outIds = ['outMyFunc','outRandom','outAdder','outDistance','outQuadratic'];
              const inIds  = ['maxRand','addX','addY','x1','y1','x2','y2','qa','qb','qc'];

              btnIds.forEach(id => expect(document.getElementById(id)).not.toBeNull());
              outIds.forEach(id => expect(document.getElementById(id)).not.toBeNull());
              inIds.forEach(id  => expect(document.getElementById(id)).not.toBeNull());
            });

            test('myFunc: counter increments and writes via textContent (no console.log)', async () => {
              const btn = document.getElementById('btnMyFunc');
              const out = () => text(document,'outMyFunc');

              btn.click(); await wait();
              const first = out();
              btn.click(); await wait();
              const second = out();

              const n1 = parseInt(first.match(/-?\d+/)?.[0] || '0', 10);
              const n2 = parseInt(second.match(/-?\d+/)?.[0] || '0', 10);
              expect(n2).toBeGreaterThan(n1);

              // no logging for output
              expect(console.log).not.toHaveBeenCalled();
            });

            test('getRandomNum(max): result 1..max or 0 when invalid (written to #outRandom)', async () => {
              setVal(document,'maxRand','12');
              document.getElementById('btnRandom').click(); await wait();
              const r1 = parseInt(text(document,'outRandom').match(/-?\d+/)?.[0] || '0', 10);
              expect(r1).toBeGreaterThanOrEqual(1);
              expect(r1).toBeLessThanOrEqual(12);

              setVal(document,'maxRand','0');
              document.getElementById('btnRandom').click(); await wait();
              const r0 = parseInt(text(document,'outRandom').match(/-?\d+/)?.[0] || '9999', 10);
              expect(r0).toBe(0);

              expect(console.log).not.toHaveBeenCalled();
            });

            test('myAdder(x,y): sum shown in #outAdder (no console.log)', async () => {
              setVal(document,'addX','2');
              setVal(document,'addY','3');
              document.getElementById('btnAdder').click(); await wait();
              const sum = parseFloat(text(document,'outAdder').match(/-?\d+(\.\d+)?/)?.[0] || 'NaN');
              expect(sum).toBeCloseTo(5, 6);
              expect(console.log).not.toHaveBeenCalled();
            });

            test('distance(x1,y1,x2,y2): numeric distance shown in #outDistance (≈4.2426; no console.log)', async () => {
              setVal(document,'x1','4'); setVal(document,'y1','5');
              setVal(document,'x2','7'); setVal(document,'y2','2');
              document.getElementById('btnDistance').click(); await wait();
              const d = parseFloat(text(document,'outDistance').match(/-?\d+(\.\d+)?/)?.[0] || 'NaN');
              expect(d).toBeCloseTo(Math.sqrt(18), 2); // tolerance
              expect(console.log).not.toHaveBeenCalled();
            });

            test('quadratic(a,b,c): roots shown in #outQuadratic (handle double root)', async () => {
              // (1,2,1) → root -1
              setVal(document,'qa','1'); setVal(document,'qb','2'); setVal(document,'qc','1');
              document.getElementById('btnQuadratic').click(); await wait();
              const t = text(document,'outQuadratic');
              const nums = (t.match(/-?\d+(\.\d+)?/g) || []).map(Number);
              expect(nums.some(n => Math.abs(n - (-1)) < 1e-3)).toBe(true);
              expect(console.log).not.toHaveBeenCalled();
            });
          });
          EOF

      - name: Run tests and summarize
        id: jest
        continue-on-error: true
        run: |
          npx jest --runInBand --json --outputFile=jest-results.json
          node - <<'NODE'
          const fs = require('fs');
          let r = { numTotalTests:0, numPassedTests:0, numFailedTests:0, testResults:[] };
          try { r = JSON.parse(fs.readFileSync('jest-results.json','utf8')); } catch {}
          const total=r.numTotalTests||0, passed=r.numPassedTests||0, failed=r.numFailedTests||0;
          const rows = (r.testResults||[]).flatMap(t => (t.assertionResults||[]).map(a => `- ${a.status==='passed'?'✅':'❌'} ${a.title}`));
          const out = [
            '# Unit 8.6 Autograder Summary',
            `**Passed:** ${passed}/${total} · **Failed:** ${failed}`,
            '',
            '## Checks',
            ...rows
          ].join('\n');
          fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, out);
          NODE

      - name: Fail job if any test failed
        if: steps.jest.outcome == 'failure'
        run: exit 1

